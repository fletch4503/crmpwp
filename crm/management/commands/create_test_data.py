import os
import random
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db import transaction
from django.utils import timezone
from faker import Faker

from users.models import Role, UserRole
from contacts.models import Contact
from companies.models import Company, Order, Payment
from projects.models import Project
from emails.models import EmailCredentials, EmailMessage

User = get_user_model()
fake = Faker("ru_RU")


class Command(BaseCommand):
    help = "Create test data for development and testing"

    def add_arguments(self, parser):
        parser.add_argument(
            "--users",
            type=int,
            default=5,
            help="Number of test users to create",
        )
        parser.add_argument(
            "--contacts",
            type=int,
            default=20,
            help="Number of test contacts to create",
        )
        parser.add_argument(
            "--companies",
            type=int,
            default=10,
            help="Number of test companies to create",
        )
        parser.add_argument(
            "--projects",
            type=int,
            default=15,
            help="Number of test projects to create",
        )
        parser.add_argument(
            "--emails",
            type=int,
            default=50,
            help="Number of test emails to create",
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("üé≤ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ..."))

        try:
            with transaction.atomic():
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏
                admin_role = Role.objects.get(name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                manager_role = Role.objects.get(name="–ú–µ–Ω–µ–¥–∂–µ—Ä")
                user_role = Role.objects.get(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = self.create_test_users(
                    options["users"], admin_role, manager_role, user_role
                )

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
                companies = self.create_test_companies(options["companies"], users)

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                contacts = self.create_test_contacts(
                    options["contacts"], users, companies
                )

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
                projects = self.create_test_projects(
                    options["projects"], users, companies
                )

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ email
                self.create_test_emails(
                    options["emails"], users, contacts, projects, companies
                )

            self.stdout.write(self.style.SUCCESS("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"))

            self.stdout.write(self.style.WARNING("\nüìä –°–æ–∑–¥–∞–Ω—ã:"))
            self.stdout.write(f'  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {options["users"]}')
            self.stdout.write(f'  üè¢ –ö–æ–º–ø–∞–Ω–∏–∏: {options["companies"]}')
            self.stdout.write(f'  üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {options["contacts"]}')
            self.stdout.write(f'  üìã –ü—Ä–æ–µ–∫—Ç—ã: {options["projects"]}')
            self.stdout.write(f'  üìß Email: {options["emails"]}')

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            )
            raise

    def create_test_users(self, count, admin_role, manager_role, user_role):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        self.stdout.write(f"üë• –°–æ–∑–¥–∞–µ–º {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        users = []
        roles = [manager_role, user_role]

        for i in range(count):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            first_name = fake.first_name()
            last_name = fake.last_name()
            email = f"user{i+1}@test.com"
            username = f"user{i+1}"

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.objects.create_user(
                email=email,
                username=username,
                password="password123",
                first_name=first_name,
                last_name=last_name,
                phone=fake.phone_number(),
                date_of_birth=fake.date_of_birth(minimum_age=18, maximum_age=65),
                is_email_verified=random.choice([True, False]),
                is_phone_verified=random.choice([True, False]),
            )

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å
            role = random.choice(roles)
            UserRole.objects.create(
                user=user,
                role=role,
                assigned_by=None,
            )

            users.append(user)
            self.stdout.write(f"  ‚úì –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} ({role.name})")

        return users

    def create_test_companies(self, count, users):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏."""
        self.stdout.write(f"üè¢ –°–æ–∑–¥–∞–µ–º {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π...")

        companies = []

        for i in range(count):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            company = Company.objects.create(
                user=random.choice(users),
                name=fake.company(),
                inn=self.generate_inn(),
                address=fake.address(),
            )

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
            if random.choice([True, False]):
                self.create_orders_and_payments(company)

            companies.append(company)
            self.stdout.write(
                f"  ‚úì –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company.name} (–ò–ù–ù: {company.inn})"
            )

        return companies

    def create_orders_and_payments(self, company):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏."""
        order_count = random.randint(1, 5)

        for _ in range(order_count):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = Order.objects.create(
                company=company,
                number=f"ORD-{random.randint(1000, 9999)}",
                amount=random.randint(10000, 500000),
            )

            # –°–æ–∑–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            if random.choice([True, False]):
                Payment.objects.create(
                    company=company,
                    order=order,
                    amount=order.amount,
                    paid_at=timezone.now() - timedelta(days=random.randint(1, 30)),
                )

    def create_test_contacts(self, count, users, companies):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã."""
        self.stdout.write(f"üë§ –°–æ–∑–¥–∞–µ–º {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")

        contacts = []

        for i in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏–ª–∏ None
            company = random.choice(companies) if random.choice([True, False]) else None

            contact = Contact.objects.create(
                user=random.choice(users),
                first_name=fake.first_name(),
                last_name=fake.last_name(),
                email=fake.email(),
                phone=fake.phone_number(),
                company=company.name if company else fake.company(),
                is_email_verified=random.choice([True, False]),
                is_phone_verified=random.choice([True, False]),
            )

            contacts.append(contact)
            self.stdout.write(f"  ‚úì –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact.get_full_name()}")

        return contacts

    def create_test_projects(self, count, users, companies):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã."""
        self.stdout.write(f"üìã –°–æ–∑–¥–∞–µ–º {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")

        projects = []
        statuses = ["draft", "active", "completed", "on_hold", "cancelled"]

        for i in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
            company = random.choice(companies) if companies else None

            project = Project.objects.create(
                user=random.choice(users),
                title=fake.sentence(nb_words=4)[:-1],  # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É
                description=fake.paragraph(nb_sentences=3),
                status=random.choice(statuses),
                priority=random.choice(["low", "medium", "high", "urgent"]),
                inn=company.inn if company else None,
            )

            projects.append(project)
            self.stdout.write(
                f"  ‚úì –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project.title} ({project.get_status_display()})"
            )

        return projects

    def create_test_emails(self, count, users, contacts, projects, companies):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ email —Å–æ–æ–±—â–µ–Ω–∏—è."""
        self.stdout.write(f"üìß –°–æ–∑–¥–∞–µ–º {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö email...")

        # –ü–æ–ª—É—á–∞–µ–º credentials –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        credentials = {}
        for user in users:
            cred = EmailCredentials.objects.filter(user=user).first()
            if cred:
                credentials[user.id] = cred

        for i in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å credentials
            user_with_creds = [u for u in users if u.id in credentials]
            if not user_with_creds:
                continue

            user = random.choice(user_with_creds)
            cred = credentials[user.id]

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            # related_contact = (
            #     random.choice(contacts)
            #     if contacts and random.choice([True, False])
            #     else None
            # )
            related_project = (
                random.choice(projects)
                if projects and random.choice([True, False])
                else None
            )
            related_company = (
                random.choice(companies)
                if companies and random.choice([True, False])
                else None
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email
            email = EmailMessage.objects.create(
                user=user,
                credentials=cred,
                subject=fake.sentence(nb_words=6)[:-1],
                body=fake.paragraph(nb_sentences=5),
                sender=fake.email(),
                recipients_to=[fake.email() for _ in range(random.randint(1, 3))],
                received_at=timezone.now()
                - timedelta(
                    days=random.randint(0, 30),
                    hours=random.randint(0, 23),
                    minutes=random.randint(0, 59),
                ),
                is_read=random.choice([True, False]),
                is_important=random.choice([True, False]),
                has_attachments=random.choice([True, False]),
                parsed_inn=(
                    related_company.inn
                    if related_company and random.choice([True, False])
                    else None
                ),
                related_company=related_company,
                related_project=related_project,
                is_processed=random.choice([True, False]),
            )

            self.stdout.write(f"  ‚úì –°–æ–∑–¥–∞–Ω email: {email.subject[:30]}...")

    def generate_inn(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ò–ù–ù."""
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 10-–∑–Ω–∞—á–Ω–æ–≥–æ –ò–ù–ù
        inn = "".join([str(random.randint(0, 9)) for _ in range(10)])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ò–ù–ù
        while Company.objects.filter(inn=inn).exists():
            inn = "".join([str(random.randint(0, 9)) for _ in range(10)])

        return inn
